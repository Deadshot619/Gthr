package com.gthr.gthrcollect.model.mapper

import com.gthr.gthrcollect.model.domain.*
import com.gthr.gthrcollect.model.network.firebaserealtimedb.*

fun CollectionInfoModel.toCollectionInfoDomainModel(collectionId: String = "") =
    CollectionInfoDomainModel(
        about = about,
        buyList = buyList,
        collectionDisplayName = collectionDisplayName, //collectionList,
        collectionRawName = collectionRawName,
        favoriteCollectionList = favoriteCollectionList,
        favoriteProductList = favoriteProductList,
        followersList = followersList,
        sellList = sellList,
        userRefKey = userRefKey,
        profileImage = profileImageURL,
        collectionId = collectionId
    )

fun FunkoModel.toFunkoDomainModel(key: String) = FunkoDomainModel(
    category = this.category?:"",
    exclusivity = this.exclusivity?:"",
    funkoType = this.funkoType?:"",
    highestBidCost = this.highestBidCost?:-1.0,
    highestBidID = this.highestBidID?:"",
    imageURL = this.imageURL?:"",
    itemNumber = this.itemNumber?:-1,
    license = this.license?:"",
    lowestAskCost = this.lowestAskCost?:-1.0,
    lowestAskID = this.lowestAskID?:"",
    marketValue = this.marketValue?:"",
    name = this.name?:"",
    numberOfFavorites = this.numberOfFavorites?:-1,
    objectID = this.objectID?:"",
    productType = this.productType?:"",
    releaseDate = this.releaseDate?:-1,
    status = this.status?:"",
    tier = this.tier?:-1,
    refKey = key
)

fun MTGModel.toMTGDomainModel(key: String) = MTGDomainModel(
    artist = this.artist?:"",
    artistIds = this.artistIds?:"",
    booster = this.booster?:"",
    borderColor = this.borderColor?:"",
    cardBackId = this.cardBackId?:"",
    cmc = this.cmc?:-1,
    collectorNumber = this.collectorNumber?:-1,
    colorIdentity = this.colorIdentity?:"",
    colors = this.colors?:"",
    digital = this.digital?:"",
    flavorText = this.flavorText?:"",
    foil = this.foil?:"",
    frame = this.frame?:-1,
    fullArt = this.fullArt?:"",
    games = this.games?:"",
    highestBidCost = this.highestBidCost?:-1.0,
    highestBidID = this.highestBidID?:"",
    highresImage = this.highresImage?:"",
    id = this.id?:"",
    illustrationId = this.illustrationId?:"",
    imageID = this.imageID?:"",
    imageUris = this.imageUris?:"",
    keywords = this.keywords?:"",
    lang = this.lang?:"",
    largeImg = this.largeImg?:"",
    layout = this.layout?:"",
    legalities = this.legalities?:"",
    lowestAskCost = this.lowestAskCost?:-1.0,
    lowestAskID = this.lowestAskID?:"",
    manaCost = this.manaCost?:"",
    mtgoFoilId = this.mtgoFoilId?:"",
    mtgoId = this.mtgoId?:"",
    name = this.name?:"",
    nonfoil = this.nonfoil?:"",
    numberOfFavorites = this.numberOfFavorites?:-1,
    objectID = this.objectID?:"",
    objectX = this.objectX?:"",
    oracleId = this.oracleId?:"",
    oracleText = this.oracleText?:"",
    oversized = this.oversized?:"",
    pngImg = this.pngImg?:"",
    power = this.power?:-1,
    prices = this.prices?:"",
    printsSearchUri = this.printsSearchUri?:"",
    producedMana = this.producedMana?:"",
    productType = this.productType?:"",
    promo = this.promo?:"",
    promoTypes = this.promoTypes?:"",
    rarity = this.rarity?:"",
    releasedAt = this.releasedAt?:"",
    reprint = this.reprint?:"",
    reserved = this.reserved?:"",
    rulingsUri = this.rulingsUri?:"",
    scryfallSetUri = this.scryfallSetUri?:"",
    scryfallUri = this.scryfallUri?:"",
    `set` = this.`set`?:"",
    setName = this.setName?:"",
    setSearchUri = this.setSearchUri?:"",
    setType = this.setType?:"",
    setUri = this.setUri?:"",
    smallImg = this.smallImg?:"",
    storySpotlight = this.storySpotlight?:"",
    tcgplayerId = this.tcgplayerId?:-1,
    textless = this.textless?:"",
    toughness = this.toughness?:-1,
    typeLine = this.typeLine?:"",
    uri = this.uri?:"",
    variation = this.variation?:"",
    watermark = this.watermark?:"",
    refKey = key
)

fun PokemonModel.toPokemonDomainModel(key: String) = PokemonDomainModel(
    japanese = this.japanese?:-1,
    english = this.english?:-1,
    cardType = this.cardType?:"",
    highestBidCost = this.highestBidCost?:-1.0,
    highestBidID = this.highestBidID?:"",
    hp = this.hp?:-1,
    imageID = this.imageID?:"",
    imageURL = this.imageURL?:"",
    japaneseNumber = this.japaneseNumber?:"",
    japaneseSet = this.japaneseSet?:"",
    lowestAskCost = this.lowestAskCost?:-1.0,
    lowestAskID = this.lowestAskID?:"",
    name = this.name?:"",
    noLanguagenoEdition = this.noLanguagenoEdition?:-1,
    number = this.number?:-1,
    numberOfFavorites = this.numberOfFavorites?:-1,
    objectID = this.objectID?:"",
    priceFoil = this.priceFoil?:"",
    priceNonFoil = this.priceNonFoil?:"",
    productType = this.productType?:"",
    rarity = this.rarity?:"",
    resistance = this.resistance?:"",
    retreatCost = this.retreatCost?:"",
    `set` = this.`set`?:"",
    stage = this.stage?:"",
    weakness = this.weakness?:"",
    refKey = key
)

fun SealedModel.toSealedDomainModel(key: String) = SealedDomainModel(
    cardText = this.cardText?:"",
    highestBidCost = this.highestBidCost?:-1.0,
    highestBidID = this.highestBidID?:"",
    imageID = this.imageID?:"",
    imageURL = this.imageURL?:"",
    lowestAskCost = this.lowestAskCost?:-1.0,
    lowestAskID = this.lowestAskID?:"",
    marketPrice = this.marketPrice?:"",
    name = this.name?:"",
    numberOfFavorites = this.numberOfFavorites?:-1,
    objectID = this.objectID?:"",
    productType = this.productType?:"",
    rarity = this.rarity?:"",
    `set` = this.`set`?:"",
    tier = this.tier?:-1,
    refKey = key
)

fun YugiohModel.toYugiohDomainModel(key: String) = YugiohDomainModel(
    asianEnglish = this.asianEnglish?:-1,
    asianEnglishOG = this.asianEnglishOG?:-1,
    cardType = this.cardType?:"",
    detailPrice = this.detailPrice?:-1.0,
    english = this.english?:-1,
    englishOG = this.englishOG?:-1,
    euroEnglish = this.euroEnglish?:-1,
    firstDescription = this.firstDescription?:"",
    french = this.french?:-1,
    frenchCanadian = this.frenchCanadian?:-1,
    frenchOG = this.frenchOG?:-1,
    german = this.german?:-1,
    germanOG = this.germanOG?:-1,
    highestBidCost = this.highestBidCost?:-1.0,
    highestBidID = this.highestBidID?:"",
    imageID = this.imageID?:"",
    imageURL = this.imageURL?:"",
    italian = this.italian?:-1,
    italianOG = this.italianOG?:-1,
    japanese = this.japanese?:-1,
    korean = this.korean?:-1,
    koreanOG = this.koreanOG?:-1,
    lowestAskCost = this.lowestAskCost?:-1.0,
    lowestAskID = this.lowestAskID?:"",
    name = this.name?:"",
    number = this.number?:"",
    numberOfFavorites = this.numberOfFavorites?:-1,
    objectID = this.objectID?:"",
    oceanicEnglish = this.oceanicEnglish?:-1,
    portuguese = this.portuguese?:-1,
    portugueseOG = this.portugueseOG?:-1,
    productType = this.productType?:"",
    rarity = this.rarity?:"",
    `set` = this.`set`?:"",
    spanish = this.spanish?:-1,
    spanishOG = this.spanishOG?:-1,
    stats = this.stats?:"",
    refKey = key
)