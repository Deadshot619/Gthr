Index: app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gthr.gthrcollect.ui.homebottomnav.feed\r\n\r\n\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.DiffUtil\r\nimport androidx.recyclerview.widget.ListAdapter\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.gthr.gthrcollect.R\r\nimport com.gthr.gthrcollect.databinding.ItemCollectionBinding\r\nimport com.gthr.gthrcollect.databinding.ItemFeedBinding\r\nimport com.gthr.gthrcollect.databinding.ItemLoadMoreBinding\r\nimport com.gthr.gthrcollect.databinding.ItemTestProductBinding\r\nimport com.gthr.gthrcollect.model.domain.FeedDomainModel\r\nimport com.gthr.gthrcollect.model.domain.ReceiptDisplayModel\r\nimport com.gthr.gthrcollect.ui.homebottomnav.search.adapter.ProductAdapter\r\nimport com.gthr.gthrcollect.utils.enums.AdapterViewType\r\nimport com.gthr.gthrcollect.utils.enums.FeedType\r\nimport com.gthr.gthrcollect.utils.enums.ProductCategory\r\nimport com.gthr.gthrcollect.utils.extensions.*\r\nimport com.gthr.gthrcollect.utils.helper.getConditionTitle\r\nimport com.gthr.gthrcollect.utils.helper.getPokemonLanguageDomainModel\r\nimport com.gthr.gthrcollect.utils.logger.GthrLogger\r\n\r\nclass FeedAdapter(val listener: FeedListener) : ListAdapter<FeedDomainModel, RecyclerView.ViewHolder>(DiffCallback){\r\n\r\n    object DiffCallback : DiffUtil.ItemCallback<FeedDomainModel>(){\r\n        override fun areItemsTheSame(oldItem: FeedDomainModel, newItem: FeedDomainModel): Boolean {\r\n            return oldItem.id == oldItem.id\r\n        }\r\n\r\n        override fun areContentsTheSame(oldItem: FeedDomainModel, newItem: FeedDomainModel): Boolean {\r\n            return oldItem == oldItem\r\n        }\r\n    }\r\n\r\n    inner class FeedViewHolder(val binding : ItemFeedBinding): RecyclerView.ViewHolder(binding.root){\r\n        fun bind(){\r\n            val item = getItem(layoutPosition)\r\n            binding.ivProduct.clipToOutline = true\r\n\r\n            item.feedType?.let {\r\n                when(it){\r\n                    FeedType.BID -> setBuyList(binding)\r\n                    FeedType.ASK -> setAsk(binding)\r\n                    FeedType.COLLECTION -> setCollection(binding)\r\n                }\r\n            }\r\n\r\n            item.productCategory?.let {\r\n                when(it){\r\n                    ProductCategory.CARDS -> {\r\n                        setCard(binding)\r\n                        if(item.condition!=null){\r\n                            binding.tvCondition.text = binding.root.context?.getConditionTitle(item.condition.type)\r\n                            binding.tvConditionValue.text = item.condition.abbreviatedName\r\n                        }\r\n                        else{\r\n                            binding.tvCondition.text = \"-\"\r\n                            binding.tvConditionValue.text = \"-\"\r\n                        }\r\n                        binding.tvLanguage.text = if(item.language!=null) getPokemonLanguageDomainModel(item.language?.key).displayName  else \"-\"\r\n                        binding.tvRow1Colum2.text = if(item.product_group.isNullOrEmpty()) \"-\" else item.product_group\r\n                        binding.tvHashValue.text = if(item.product_productNumber.isNullOrEmpty()) \"-\" else item.product_productNumber\r\n                        binding.tvEditionValue.text = if(item.edition.isNullOrEmpty()) \"-\" else item.edition\r\n                    }\r\n                    ProductCategory.SEALED -> {\r\n                        setSealed(binding)\r\n                        binding.tvSealedSet.text = if(item.product_group.isNullOrEmpty()) \"-\" else item.product_group\r\n                    }\r\n                    ProductCategory.TOYS -> {\r\n                        setToy(binding)\r\n                        binding.tvToyLicense.text = \"-\"\r\n                        binding.tvToyHash.text = if(item.product_productNumber.isNullOrEmpty()) \"-\" else item.product_productNumber\r\n                    }\r\n                }\r\n            }\r\n\r\n            binding.tvUserName.text = if(item.collectionDisplayName.isNullOrEmpty()) \"-\" else item.collectionDisplayName\r\n            binding.tvProductType.text = if(item.product_rarity.isNullOrEmpty()) \"-\" else item.product_rarity\r\n            binding.tvTitle.text = if(item.product_productName.isNullOrEmpty()) \"-\" else item.product_productName\r\n            binding.tvPrice.text = item?.price?.let { String.format(binding.tvPrice.context.getString(R.string.rate_common),it.toDouble()) }\r\n\r\n            item.collection_profileImageURL?.let { binding.ivUser.setProfileImage(it) }\r\n\r\n            if(item.frontImageURL.isNullOrEmpty())\r\n                item.product_firImageURL?.let { binding.ivProduct.setProductImage(it) }\r\n            else\r\n                item.frontImageURL?.let { binding.ivProduct.setProductImage(it) }\r\n\r\n            binding.root.setOnClickListener {\r\n                listener.onClick(item)\r\n            }\r\n\r\n            binding.ivShare.setOnClickListener {\r\n                listener.share(item)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    inner class ItemLoadMoreViewHolder(val binding: ItemLoadMoreBinding) : RecyclerView.ViewHolder(binding.root)\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder =\r\n        if (viewType == AdapterViewType.VIEW_TYPE_ITEM.value)\r\n            FeedViewHolder(ItemFeedBinding.inflate(LayoutInflater.from(parent.context),parent,false))\r\n        else\r\n            ItemLoadMoreViewHolder(ItemLoadMoreBinding.inflate(LayoutInflater.from(parent.context), parent, false))\r\n\r\n\r\n\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        if(getItem(position).viewType== AdapterViewType.VIEW_TYPE_ITEM)\r\n            (holder as FeedViewHolder).bind()\r\n    }\r\n\r\n\r\n    override fun getItemViewType(position: Int): Int {\r\n        return getItem(position).viewType.value\r\n    }\r\n\r\n    private fun setCollection(binding: ItemFeedBinding) {\r\n        binding.tvNewTo.text = binding.tvNewTo.context.getString(R.string.text_feed_new_to_collection)\r\n        binding.tvNewTo.setTextColor(binding.tvNewTo.getResolvedColor(R.color.text_color_dark_green))\r\n        binding.btnBuyNow.gone()\r\n        binding.tvPrice.gone()\r\n    }\r\n\r\n    private fun setAsk(binding: ItemFeedBinding) {\r\n        binding.tvNewTo.text = binding.tvNewTo.context.getString(R.string.text_feed_new_ask)\r\n        binding.tvNewTo.setTextColor(binding.tvNewTo.getResolvedColor(R.color.red))\r\n        binding.btnBuyNow.visible()\r\n        binding.tvPrice.visible()\r\n    }\r\n\r\n    private fun setBuyList(binding: ItemFeedBinding) {\r\n        binding.tvNewTo.text = binding.tvNewTo.context.getString(R.string.text_feed_new_to_buy_list)\r\n        binding.tvNewTo.setTextColor(binding.tvNewTo.getResolvedColor(R.color.text_color_dark_green))\r\n        binding.btnBuyNow.gone()\r\n        binding.tvPrice.visible()\r\n    }\r\n\r\n    private fun setToy(binding: ItemFeedBinding) {\r\n        binding.groupToy.visible()\r\n        binding.groupCard.gone()\r\n        binding.groupSealed.gone()\r\n    }\r\n\r\n    private fun setSealed(binding: ItemFeedBinding) {\r\n        binding.groupToy.gone()\r\n        binding.groupCard.gone()\r\n        binding.groupSealed.visible()\r\n    }\r\n\r\n    private fun setCard(binding: ItemFeedBinding) {\r\n        binding.groupToy.gone()\r\n        binding.groupCard.visible()\r\n        binding.groupSealed.gone()\r\n    }\r\n\r\n    interface FeedListener {\r\n        fun onClick(feedDomainModel: FeedDomainModel)\r\n        fun share(feedDomainModel: FeedDomainModel)\r\n        fun goToProfile(feedDomainModel: FeedDomainModel)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt b/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt
--- a/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt	(revision 1a0a90ec51fc6dc8f662a8b65a38a5c2643f3b8d)
+++ b/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt	(date 1633091399969)
@@ -64,21 +64,23 @@
                         binding.tvRow1Colum2.text = if(item.product_group.isNullOrEmpty()) "-" else item.product_group
                         binding.tvHashValue.text = if(item.product_productNumber.isNullOrEmpty()) "-" else item.product_productNumber
                         binding.tvEditionValue.text = if(item.edition.isNullOrEmpty()) "-" else item.edition
+                        binding.tvProductType.text = if(item.product_rarity.isNullOrEmpty()) "-" else item.product_rarity
                     }
                     ProductCategory.SEALED -> {
                         setSealed(binding)
                         binding.tvSealedSet.text = if(item.product_group.isNullOrEmpty()) "-" else item.product_group
+                        binding.tvProductType.text = if(item.productType?.title.isNullOrEmpty()) "-" else item.productType?.title
                     }
                     ProductCategory.TOYS -> {
                         setToy(binding)
                         binding.tvToyLicense.text = "-"
+                        binding.tvProductType.text = if(item.productType?.title.isNullOrEmpty()) "-" else item.productType?.title
                         binding.tvToyHash.text = if(item.product_productNumber.isNullOrEmpty()) "-" else item.product_productNumber
                     }
                 }
             }
 
             binding.tvUserName.text = if(item.collectionDisplayName.isNullOrEmpty()) "-" else item.collectionDisplayName
-            binding.tvProductType.text = if(item.product_rarity.isNullOrEmpty()) "-" else item.product_rarity
             binding.tvTitle.text = if(item.product_productName.isNullOrEmpty()) "-" else item.product_productName
             binding.tvPrice.text = item?.price?.let { String.format(binding.tvPrice.context.getString(R.string.rate_common),it.toDouble()) }
 
Index: app/src/main/java/com/gthr/gthrcollect/ui/productdetail/productdetailscreen/ProductDetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gthr.gthrcollect.ui.productdetail.productdetailscreen\r\n\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.util.Log\r\nimport android.widget.FrameLayout\r\nimport androidx.appcompat.widget.AppCompatImageView\r\nimport androidx.appcompat.widget.AppCompatTextView\r\nimport androidx.constraintlayout.widget.Group\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.card.MaterialCardView\r\nimport com.gthr.gthrcollect.GthrCollect\r\nimport com.gthr.gthrcollect.R\r\nimport com.gthr.gthrcollect.data.repository.DynamicLinkRepository\r\nimport com.gthr.gthrcollect.data.repository.ProductDetailsRepository\r\nimport com.gthr.gthrcollect.data.repository.SearchRepository\r\nimport com.gthr.gthrcollect.databinding.LayoutProductDetailMainDetailsBinding\r\nimport com.gthr.gthrcollect.databinding.LayoutProductDetailMtgDetailBinding\r\nimport com.gthr.gthrcollect.databinding.ProductDetailFragmentBinding\r\nimport com.gthr.gthrcollect.model.State\r\nimport com.gthr.gthrcollect.model.domain.*\r\nimport com.gthr.gthrcollect.ui.askflow.AskFlowActivity\r\nimport com.gthr.gthrcollect.ui.base.BaseFragment\r\nimport com.gthr.gthrcollect.ui.editaccountinfo.EditAccountInfoActivity\r\nimport com.gthr.gthrcollect.ui.homebottomnav.HomeBottomNavActivity\r\nimport com.gthr.gthrcollect.ui.homebottomnav.market.AskAdapter\r\nimport com.gthr.gthrcollect.ui.productdetail.ProductDetailActivity\r\nimport com.gthr.gthrcollect.ui.productdetail.ProductDetailsViewModel\r\nimport com.gthr.gthrcollect.ui.productdetail.ProductDetailsViewModelFactory\r\nimport com.gthr.gthrcollect.ui.productdetail.adapter.ProductAdapter\r\nimport com.gthr.gthrcollect.ui.productdetail.adapter.RecentSellAdapter\r\nimport com.gthr.gthrcollect.utils.customviews.CustomLegalityView\r\nimport com.gthr.gthrcollect.utils.customviews.CustomProductButton\r\nimport com.gthr.gthrcollect.utils.customviews.CustomProductCell\r\nimport com.gthr.gthrcollect.utils.customviews.CustomSeeAllView\r\nimport com.gthr.gthrcollect.utils.enums.AskFlowType\r\nimport com.gthr.gthrcollect.utils.enums.EditAccountInfoFlow\r\nimport com.gthr.gthrcollect.utils.enums.ProductCategory\r\nimport com.gthr.gthrcollect.utils.enums.ProductType\r\nimport com.gthr.gthrcollect.utils.extensions.*\r\nimport com.gthr.gthrcollect.utils.getProductCategory\r\nimport com.gthr.gthrcollect.utils.logger.GthrLogger\r\n\r\nclass ProductDetailFragment : BaseFragment<ProductDetailsViewModel, ProductDetailFragmentBinding>() {\r\n\r\n    override val mViewModel: ProductDetailsViewModel by activityViewModels {\r\n        ProductDetailsViewModelFactory(\r\n            ProductDetailsRepository(),\r\n            DynamicLinkRepository(),\r\n            SearchRepository()\r\n        )\r\n    }\r\n\r\n    override fun getViewBinding() = ProductDetailFragmentBinding.inflate(layoutInflater)\r\n\r\n    private lateinit var rvRecentSell: RecyclerView\r\n    private lateinit var rvUpForSell: RecyclerView\r\n    private lateinit var rvRelated: RecyclerView\r\n    private lateinit var mFlDetails: FrameLayout\r\n    private lateinit var mMcvDescription: MaterialCardView\r\n    private lateinit var mTvDescription: AppCompatTextView\r\n    private lateinit var mIvProduct: AppCompatImageView\r\n\r\n    private lateinit var mBtnBuy: CustomProductButton\r\n    private lateinit var mBtnCollect: CustomProductButton\r\n    private lateinit var mBtnSell: CustomProductButton\r\n    private lateinit var mGroupUpForSell: Group\r\n    private lateinit var mGroupRelated: Group\r\n\r\n    private lateinit var mRecentSellSeeAll: CustomSeeAllView\r\n    private lateinit var mUpForSellSeeAll: CustomSeeAllView\r\n\r\n    private val args by navArgs<ProductDetailFragmentArgs>()\r\n    private lateinit var mProductDisplayModel: ProductDisplayModel\r\n    private lateinit var mProductType: ProductType\r\n    private lateinit var mProductCategory: ProductCategory\r\n    private lateinit var mRelatedAdapter: ProductAdapter\r\n    private lateinit var mUpForSaleAdapter: AskAdapter\r\n\r\n\r\n    //Mtg Details view\r\n    private lateinit var mLayoutProductDetailMtgDetailBinding: LayoutProductDetailMtgDetailBinding\r\n\r\n    //Funko,Pokemon Details view\r\n    private lateinit var mLayoutProductDetailMainDetailsBinding: LayoutProductDetailMainDetailsBinding\r\n\r\n    private lateinit var recentSaleAdapter: RecentSellAdapter\r\n\r\n    override fun onBinding() {\r\n        mViewBinding.lifecycleOwner = viewLifecycleOwner\r\n        mProductDisplayModel = args.productDisplayModel\r\n        mProductType = mProductDisplayModel.productType!!\r\n        mProductCategory = getProductCategory(mProductType)!!\r\n\r\n        setHasOptionsMenu(true)\r\n        initViews()\r\n        setUpOnClickListeners()\r\n        setUpRecentSell()\r\n        setUpRelated()\r\n        setUpUpForSell()\r\n        setUpProductType()\r\n\r\n        mViewModel.fetchUpForSale(\r\n            searchTerm = null,\r\n            limit = 20,\r\n            page = 0,\r\n            sortBy = \"price\",\r\n            isAscending = 1,\r\n            productType = mProductType.title,\r\n            productCategory = getProductCategory(mProductType)?.title,\r\n            objectId = mProductDisplayModel.objectID\r\n        )\r\n\r\n        setUpObserver()\r\n    }\r\n\r\n    private fun setUpObserver() {\r\n        mViewModel.mRelatedProductList.observe(viewLifecycleOwner) { it ->\r\n            it.peekContent()?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Failed -> showProgressBar(false)\r\n                    is State.Success -> {\r\n                        GthrLogger.i(\"dskjvjnkdf\", \"ProductDisplayModel : ${it.data}\")\r\n                        if (it.data.isEmpty()) {\r\n                            mGroupRelated.gone()\r\n                            mGroupUpForSell.gone()\r\n                        } else {\r\n                            mGroupUpForSell.visible()\r\n                            mGroupRelated.visible()\r\n                            mRelatedAdapter.submitList(it.data)\r\n                        }\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        mViewModel.mRecentSaleList.observe(viewLifecycleOwner) { it ->\r\n            it.peekContent()?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Failed -> showProgressBar(false)\r\n                    is State.Success -> {\r\n                        if (it.data.size < 6)\r\n                            recentSaleAdapter.submitList(it.data)\r\n                        else {\r\n                            val list = it.data.take(5)\r\n                            recentSaleAdapter.submitList(list)\r\n                        }\r\n                        GthrLogger.i(\"dsbkjsdn\", \"Recent Sale : ${it.data}\")\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        mViewModel.mMtgProductDetails.observe(viewLifecycleOwner) { it ->\r\n            it.peekContent()?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Success -> {\r\n                        GthrLogger.i(\"dsbkjsdn\", \"Product hello : ${it.data}\")\r\n                        showProgressBar(false)\r\n                        setViewData(it.data)\r\n                    }\r\n                    is State.Failed -> showProgressBar(false)\r\n                }\r\n            }\r\n        }\r\n        mViewModel.mFunkoProductDetails.observe(viewLifecycleOwner) { it ->\r\n            it.peekContent()?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Success -> {\r\n                        GthrLogger.i(\"dsbkjsdn\", \"Product hello : ${it.data}\")\r\n                        showProgressBar(false)\r\n                        setViewData(it.data)\r\n                    }\r\n                    is State.Failed -> showProgressBar(false)\r\n                }\r\n            }\r\n        }\r\n        mViewModel.mPokemonProductDetails.observe(viewLifecycleOwner) { it ->\r\n            it.peekContent()?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Success -> {\r\n                        GthrLogger.i(\"dsbkjsdn\", \"Product hello : ${it.data}\")\r\n                        showProgressBar(false)\r\n                        setViewData(it.data)\r\n                    }\r\n                    is State.Failed -> showProgressBar(false)\r\n                }\r\n            }\r\n        }\r\n        mViewModel.mSealedProductDetails.observe(viewLifecycleOwner) { it ->\r\n            it.peekContent()?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Success -> {\r\n                        GthrLogger.i(\"dsbkjsdn\", \"Product hello : ${it.data}\")\r\n                        showProgressBar(false)\r\n                        setViewData(it.data)\r\n                    }\r\n                    is State.Failed -> showProgressBar(false)\r\n                }\r\n            }\r\n        }\r\n        mViewModel.mYugiohProductDetails.observe(viewLifecycleOwner) { it ->\r\n            it.peekContent()?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Success -> {\r\n                        GthrLogger.i(\"dsbkjsdn\", \"Product hello : ${it.data}\")\r\n                        showProgressBar(false)\r\n                        setViewData(it.data)\r\n                    }\r\n                    is State.Failed -> showProgressBar(false)\r\n                }\r\n            }\r\n        }\r\n\r\n        mViewModel.upForSaleList.observe(viewLifecycleOwner) {  it ->\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                        showToast(it.message)\r\n                    }\r\n                    is State.Success -> {\r\n                        if(it.data.size>0){\r\n                            mGroupUpForSell.visible()\r\n                            mUpForSaleAdapter.submitList(it.data.take(10))\r\n                        }\r\n                        else{\r\n                            mGroupUpForSell.gone()\r\n                        }\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun setUpOnClickListeners() {\r\n        mRecentSellSeeAll.setOnClickListener {\r\n            recentSellSeeAll()\r\n        }\r\n        mUpForSellSeeAll.setOnClickListener {\r\n            upForSellSeeAll()\r\n        }\r\n        mBtnBuy.setOnClickListener {\r\n            if (GthrCollect.prefs?.isUserLoggedIn() == true)\r\n                if (GthrCollect.prefs?.isUserGovIdVerified() == true)\r\n                    startActivity(\r\n                        AskFlowActivity.getInstance(\r\n                            requireContext(),\r\n                            AskFlowType.BUY,\r\n                            mProductDisplayModel\r\n                        )\r\n                    )\r\n                else\r\n                    startActivityForResult(\r\n                        EditAccountInfoActivity.getInstance(\r\n                            requireContext(),\r\n                            EditAccountInfoFlow.GOV_ID\r\n                        ), REQUEST_CODE_ID_VERIFICATION_BUY\r\n                    )\r\n            else\r\n                startActivity(\r\n                    HomeBottomNavActivity.getInstance(\r\n                        requireContext(),\r\n                        goToProfileSignUp = true\r\n                    )\r\n                )\r\n        }\r\n        mBtnCollect.setOnClickListener {\r\n            if (GthrCollect.prefs?.isUserLoggedIn()==true)\r\n                startActivity(\r\n                    AskFlowActivity.getInstance(\r\n                        requireContext(),\r\n                        AskFlowType.COLLECT,\r\n                        mProductDisplayModel\r\n                    )\r\n                )\r\n            else\r\n                startActivity(\r\n                    HomeBottomNavActivity.getInstance(\r\n                        requireContext(),\r\n                        goToProfileSignUp = true\r\n                    )\r\n                )\r\n        }\r\n        mBtnSell.setOnClickListener {\r\n            if (GthrCollect.prefs?.isUserLoggedIn() == true)\r\n                if (GthrCollect.prefs?.isUserGovIdVerified() == true)\r\n                    startActivity(\r\n                        AskFlowActivity.getInstance(\r\n                            requireContext(),\r\n                            AskFlowType.SELL,\r\n                            mProductDisplayModel\r\n                        )\r\n                    )\r\n                else\r\n                    startActivityForResult(\r\n                        EditAccountInfoActivity.getInstance(\r\n                            requireContext(),\r\n                            EditAccountInfoFlow.GOV_ID\r\n                        ), REQUEST_CODE_ID_VERIFICATION_SELL\r\n                    )\r\n            else{\r\n                startActivity(\r\n                    HomeBottomNavActivity.getInstance(\r\n                        requireContext(),\r\n                        goToProfileSignUp = true\r\n                    )\r\n                )\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private fun upForSellSeeAll() {\r\n        val action =\r\n            ProductDetailFragmentDirections.actionProductDetailFragmentToUpForSellFragment(\r\n                mProductType\r\n            )\r\n        findNavController().navigate(action)\r\n    }\r\n\r\n    private fun recentSellSeeAll() {\r\n        val action =\r\n            ProductDetailFragmentDirections.actionProductDetailFragmentToRecentSellFragment(\r\n                mProductType\r\n            )\r\n        findNavController().navigate(action)\r\n    }\r\n\r\n    private fun setUpProductType() {\r\n        when (mProductType) {\r\n            ProductType.POKEMON -> setUpPokemon()\r\n            ProductType.MAGIC_THE_GATHERING -> setUpMGT()\r\n            ProductType.YUGIOH -> seUpYugioh()\r\n            ProductType.SEALED_POKEMON, ProductType.SEALED_MTG, ProductType.SEALED_YUGIOH -> setUpSealed()\r\n            ProductType.FUNKO -> setUpFunko()\r\n        }\r\n    }\r\n\r\n    private fun setUpFunko() {\r\n        mLayoutProductDetailMainDetailsBinding =\r\n            LayoutProductDetailMainDetailsBinding.inflate(layoutInflater)\r\n        mFlDetails.addView(mLayoutProductDetailMainDetailsBinding.root)\r\n\r\n        mLayoutProductDetailMainDetailsBinding.tvRow1Column1.text =\r\n            getString(R.string.text_release_date_product_detail)\r\n        mLayoutProductDetailMainDetailsBinding.tvRow1Column2.text =\r\n            getString(R.string.text_category_product_detail)\r\n        mLayoutProductDetailMainDetailsBinding.tvRow3Column1.text =\r\n            getString(R.string.text_item_number_product_dtail)\r\n        mLayoutProductDetailMainDetailsBinding.tvRow3Column2.text =\r\n            getString(R.string.text_product_type_product_detail)\r\n        mLayoutProductDetailMainDetailsBinding.tvRow5Column1.text =\r\n            getString(R.string.text_exclusivity_product_detail)\r\n        mLayoutProductDetailMainDetailsBinding.tvRow5Column2.text =\r\n            getString(R.string.text_license_product_detail)\r\n\r\n        mLayoutProductDetailMainDetailsBinding.groupYugioh.gone()\r\n\r\n        mMcvDescription.gone()\r\n    }\r\n\r\n    private fun setUpSealed() {\r\n        mMcvDescription.visible()\r\n    }\r\n\r\n    private fun seUpYugioh() {\r\n        mLayoutProductDetailMainDetailsBinding =\r\n            LayoutProductDetailMainDetailsBinding.inflate(layoutInflater)\r\n        mFlDetails.addView(mLayoutProductDetailMainDetailsBinding.root)\r\n\r\n        mLayoutProductDetailMainDetailsBinding.run {\r\n            tvRow1Column1.text = getString(R.string.text_number_product_detail)\r\n            tvRow1Column2.text = getString(R.string.text_type_product_detail)\r\n            tvRow3Column1.text = getString(R.string.text_set_product_details)\r\n            tvRow3Column2.text = getString(R.string.text_stats_product_details)\r\n            tvRow5Column1.text = getString(R.string.text_rarity_product_details)\r\n            tvRow5Column2.text = \"\"\r\n\r\n            groupYugioh.gone()\r\n        }\r\n        mMcvDescription.visible()\r\n    }\r\n\r\n    private fun setUpMGT() {\r\n        mLayoutProductDetailMtgDetailBinding =\r\n            LayoutProductDetailMtgDetailBinding.inflate(layoutInflater)\r\n        mFlDetails.addView(mLayoutProductDetailMtgDetailBinding.root)\r\n\r\n        mMcvDescription.gone()\r\n    }\r\n\r\n    private fun setUpPokemon() {\r\n        mLayoutProductDetailMainDetailsBinding =\r\n            LayoutProductDetailMainDetailsBinding.inflate(layoutInflater)\r\n        mLayoutProductDetailMainDetailsBinding.run {\r\n            mFlDetails.addView(root)\r\n            tvRow1Column1.text = getString(R.string.text_number_product_detail)\r\n            tvRow1Column2.text = getString(R.string.text_type_product_detail)\r\n            tvRow3Column1.text = getString(R.string.text_set_product_details)\r\n            tvRow3Column2.text = getString(R.string.text_hp_product_details)\r\n            tvRow5Column1.text = getString(R.string.text_rarity_product_details)\r\n            tvRow5Column2.text = getString(R.string.text_stage_product_details)\r\n            tvRow7Column1.text = getString(R.string.text_jap_number_product_detail)\r\n            tvRow7Column2.text = getString(R.string.text_jap_set_product_detail)\r\n        }\r\n\r\n        mMcvDescription.gone()\r\n    }\r\n\r\n    private fun setUpRelated() {\r\n        mRelatedAdapter = ProductAdapter(mProductType, CustomProductCell.State.NORMAL) {\r\n            startActivity(ProductDetailActivity.getInstance(requireContext(), it.objectID!!,it.productType!!))\r\n        }\r\n\r\n        rvRelated.apply {\r\n            layoutManager = LinearLayoutManager(\r\n                requireContext(),\r\n                LinearLayoutManager.HORIZONTAL, false\r\n            )\r\n            adapter = mRelatedAdapter\r\n        }\r\n    }\r\n\r\n    private fun setUpUpForSell() {\r\n        rvUpForSell.apply {\r\n            layoutManager =\r\n                LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\r\n\r\n            mUpForSaleAdapter = AskAdapter(CustomProductCell.State.FOR_SALE) {\r\n                /*startActivity(\r\n                    AskFlowActivity.getInstance(\r\n                        requireContext(),\r\n                        AskFlowType.BUY_DIRECTLY_FROM_SOMEONE,\r\n                        it\r\n                    )\r\n                )*/\r\n            }\r\n\r\n            rvUpForSell.adapter = mUpForSaleAdapter\r\n        }\r\n    }\r\n\r\n    private fun setUpRecentSell() {\r\n        recentSaleAdapter = RecentSellAdapter(mProductType)\r\n        rvRecentSell.apply {\r\n            layoutManager = LinearLayoutManager(requireContext())\r\n            adapter = recentSaleAdapter\r\n        }\r\n    }\r\n\r\n    private fun initViews() {\r\n        mViewBinding.let {\r\n            rvRecentSell = it.rvRecentSell\r\n            rvUpForSell = it.rvUpForSell\r\n            rvRelated = it.rvRelated\r\n            mFlDetails = it.flDetail\r\n            mMcvDescription = it.cvCardDescription\r\n            mTvDescription = it.tvDescription\r\n            mRecentSellSeeAll = it.csavRecentSalesSeeAll\r\n            mUpForSellSeeAll = it.csavUpForSalesSeeAll\r\n            mBtnBuy = it.btnBuy\r\n            mBtnCollect = it.btnCollect\r\n            mBtnSell = it.btnSell\r\n            mIvProduct = it.ivProduct\r\n            mGroupUpForSell = it.groupUpForSell\r\n            mGroupRelated = it.groupRelated\r\n            initProgressBar(it.layoutProgress)\r\n        }\r\n    }\r\n\r\n    private fun setViewData(data: SealedDomainModel) {\r\n        mIvProduct.setProductImage(data.firImageURL)\r\n        mTvDescription.text = data.description\r\n    }\r\n\r\n    private fun setViewData(data: MTGDomainModel) {\r\n        mIvProduct.setProductImage(data.imageUris)\r\n        mLayoutProductDetailMtgDetailBinding.run {\r\n            clvStandard.setType(if (data.standard) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvBrawl.setType(if (data.brawl) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvPioneer.setType(if (data.pioneer) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvModern.setType(if (data.modern) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvPauper.setType(if (data.pauper) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvLegacy.setType(if (data.legacy) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvPenny.setType(if (data.penny) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvCommander.setType(if (data.commander) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvVintage.setType(if (data.vintage) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n            clvHistoric.setType(if (data.historic) CustomLegalityView.Type.LEGAL else CustomLegalityView.Type.NOT_LEGAL)\r\n\r\n            tvTitle.text = data.typeLine\r\n            tvTextLine1.text = data.flavorText\r\n            tvOutOf.text = (data.power/*/data.toughness*/).toString()\r\n        }\r\n    }\r\n\r\n    private fun setViewData(data: YugiohDomainModel) {\r\n        Log.i(\"dschjds\", \"setViewData: \"+data.firImageURL)\r\n        mIvProduct.setProductImage(data.firImageURL)\r\n        mTvDescription.text = data.firstDescription\r\n        mLayoutProductDetailMainDetailsBinding.run {\r\n            tvRow2Column1.text = data.number\r\n            tvRow2Column2.text = data.cardType\r\n            tvRow4Column1.text = data.set\r\n            tvRow4Column2.text = data.stats\r\n            tvRow6Column1.text = data.rarity\r\n            tvRow6Column2.text = \"\"\r\n        }\r\n    }\r\n\r\n    private fun setViewData(data: PokemonDomainModel) {\r\n        mIvProduct.setProductImage(data.firImageURL)\r\n        mLayoutProductDetailMainDetailsBinding.run {\r\n            tvRow2Column1.text = data.number\r\n            tvRow2Column2.text = data.cardType\r\n            tvRow4Column1.text = data.set\r\n            tvRow4Column2.text = data.hp\r\n            tvRow6Column1.text = data.rarity\r\n            tvRow6Column2.text = data.stage\r\n            tvRow8Column1.text = data.japaneseNumber\r\n            tvRow8Column2.text = data.japaneseSet\r\n        }\r\n    }\r\n\r\n    private fun setViewData(data: FunkoDomainModel) {\r\n        mIvProduct.setProductImage(data.firImageURL)\r\n        mLayoutProductDetailMainDetailsBinding.run {\r\n            tvRow2Column1.text = data.releaseDate\r\n            tvRow2Column2.text = data.category\r\n\r\n            tvRow4Column2.text = data.productType.toString()\r\n            tvRow4Column1.text = data.itemNumber\r\n\r\n            tvRow6Column2.text = data.license\r\n            tvRow6Column1.text = data.exclusivity\r\n        }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (data != null && resultCode == Activity.RESULT_OK) {\r\n            if (requestCode == REQUEST_CODE_ID_VERIFICATION_BUY)\r\n                startActivity(\r\n                    AskFlowActivity.getInstance(\r\n                        requireContext(),\r\n                        AskFlowType.BUY,\r\n                        mProductDisplayModel\r\n                    )\r\n                )\r\n\r\n            if (requestCode == REQUEST_CODE_ID_VERIFICATION_SELL)\r\n                startActivity(\r\n                    AskFlowActivity.getInstance(\r\n                        requireContext(),\r\n                        AskFlowType.SELL,\r\n                        mProductDisplayModel\r\n                    )\r\n                )\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        private const val REQUEST_CODE_ID_VERIFICATION_BUY = 69\r\n        private const val REQUEST_CODE_ID_VERIFICATION_SELL = 420\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gthr/gthrcollect/ui/productdetail/productdetailscreen/ProductDetailFragment.kt b/app/src/main/java/com/gthr/gthrcollect/ui/productdetail/productdetailscreen/ProductDetailFragment.kt
--- a/app/src/main/java/com/gthr/gthrcollect/ui/productdetail/productdetailscreen/ProductDetailFragment.kt	(revision 1a0a90ec51fc6dc8f662a8b65a38a5c2643f3b8d)
+++ b/app/src/main/java/com/gthr/gthrcollect/ui/productdetail/productdetailscreen/ProductDetailFragment.kt	(date 1633091916884)
@@ -256,7 +256,7 @@
         }
         mBtnBuy.setOnClickListener {
             if (GthrCollect.prefs?.isUserLoggedIn() == true)
-                if (GthrCollect.prefs?.isUserGovIdVerified() == true)
+               // if (GthrCollect.prefs?.isUserGovIdVerified() == true)
                     startActivity(
                         AskFlowActivity.getInstance(
                             requireContext(),
@@ -264,13 +264,13 @@
                             mProductDisplayModel
                         )
                     )
-                else
-                    startActivityForResult(
-                        EditAccountInfoActivity.getInstance(
-                            requireContext(),
-                            EditAccountInfoFlow.GOV_ID
-                        ), REQUEST_CODE_ID_VERIFICATION_BUY
-                    )
+//                else
+//                    startActivityForResult(
+//                        EditAccountInfoActivity.getInstance(
+//                            requireContext(),
+//                            EditAccountInfoFlow.GOV_ID
+//                        ), REQUEST_CODE_ID_VERIFICATION_BUY
+//                    )
             else
                 startActivity(
                     HomeBottomNavActivity.getInstance(
@@ -298,7 +298,7 @@
         }
         mBtnSell.setOnClickListener {
             if (GthrCollect.prefs?.isUserLoggedIn() == true)
-                if (GthrCollect.prefs?.isUserGovIdVerified() == true)
+//                if (GthrCollect.prefs?.isUserGovIdVerified() == true)
                     startActivity(
                         AskFlowActivity.getInstance(
                             requireContext(),
@@ -306,13 +306,13 @@
                             mProductDisplayModel
                         )
                     )
-                else
-                    startActivityForResult(
-                        EditAccountInfoActivity.getInstance(
-                            requireContext(),
-                            EditAccountInfoFlow.GOV_ID
-                        ), REQUEST_CODE_ID_VERIFICATION_SELL
-                    )
+//                else
+//                    startActivityForResult(
+//                        EditAccountInfoActivity.getInstance(
+//                            requireContext(),
+//                            EditAccountInfoFlow.GOV_ID
+//                        ), REQUEST_CODE_ID_VERIFICATION_SELL
+//                    )
             else{
                 startActivity(
                     HomeBottomNavActivity.getInstance(
Index: app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gthr.gthrcollect.ui.homebottomnav.feed\r\n\r\nimport android.content.Intent\r\nimport android.util.Log\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.gthr.gthrcollect.GthrCollect\r\nimport com.gthr.gthrcollect.data.repository.DynamicLinkRepository\r\nimport com.gthr.gthrcollect.data.repository.FeedRepository\r\nimport com.gthr.gthrcollect.databinding.FeedFragmentBinding\r\nimport com.gthr.gthrcollect.model.State\r\nimport com.gthr.gthrcollect.model.domain.FeedDomainModel\r\nimport com.gthr.gthrcollect.model.domain.ForSaleItemDomainModel\r\nimport com.gthr.gthrcollect.model.domain.ProductDisplayModel\r\nimport com.gthr.gthrcollect.ui.askflow.AskFlowActivity\r\nimport com.gthr.gthrcollect.ui.base.BaseFragment\r\nimport com.gthr.gthrcollect.ui.editaccountinfo.EditAccountInfoActivity\r\nimport com.gthr.gthrcollect.ui.homebottomnav.HomeBottomNavActivity\r\nimport com.gthr.gthrcollect.ui.productdetail.productdetailscreen.ProductDetailFragment\r\nimport com.gthr.gthrcollect.ui.profile.ProfileActivity\r\nimport com.gthr.gthrcollect.utils.customviews.CustomCollectionTypeView\r\nimport com.gthr.gthrcollect.utils.enums.*\r\nimport com.gthr.gthrcollect.utils.extensions.isUserGovIdVerified\r\nimport com.gthr.gthrcollect.utils.extensions.isUserLoggedIn\r\nimport com.gthr.gthrcollect.utils.extensions.showToast\r\nimport com.gthr.gthrcollect.utils.logger.GthrLogger\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.MainScope\r\nimport kotlinx.coroutines.launch\r\n\r\nclass FeedFragment : BaseFragment<FeedViewModel, FeedFragmentBinding>() {\r\n\r\n    override fun getViewBinding() = FeedFragmentBinding.inflate(layoutInflater)\r\n    override val mViewModel: FeedViewModel by viewModels{\r\n        FeedViewModelFactory(\r\n            FeedRepository(),\r\n            DynamicLinkRepository()\r\n        )\r\n    }\r\n\r\n    private var mainJob: Job? = null\r\n\r\n    private lateinit var mAll: CustomCollectionTypeView\r\n    private lateinit var mCards: CustomCollectionTypeView\r\n    private lateinit var mSealed: CustomCollectionTypeView\r\n    private lateinit var mFunko: CustomCollectionTypeView\r\n\r\n    private lateinit var mRvMain : RecyclerView\r\n    private lateinit var mAdapter: FeedAdapter\r\n\r\n    //List of Collection filter views\r\n    private lateinit var mCctvList: List<CustomCollectionTypeView>\r\n\r\n    //Filter var\r\n    private var mProductCategory: ProductCategory? = null\r\n    private var mCreatorUID: String? = null\r\n\r\n    private var mLimit : Int = 60\r\n    private var mPage: Int = 0\r\n\r\n    //Paging\r\n    private var mIsLoading = false\r\n    private var mHasNext = true\r\n\r\n    override fun onBinding() {\r\n        initViews()\r\n        setUpClickListeners()\r\n        setUpFeedRecyclerView()\r\n        setUpObserver()\r\n        getFeed(0,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n    }\r\n\r\n    private fun getFeed(page: Int, productCategory: ProductCategory?, creatorUID: String?,setReset: Boolean = false){\r\n        if (setReset)\r\n            resetFeed()\r\n\r\n        mPage = page\r\n        mProductCategory = productCategory\r\n        mCreatorUID = creatorUID\r\n        mViewModel.fetchFeed(mLimit,mPage,mProductCategory,mCreatorUID)\r\n    }\r\n\r\n    private fun setUpObserver() {\r\n\r\n        mViewModel.mDynamicLink.observe(this){\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        val intent = Intent()\r\n                        // val msg = \"Click and install this application $shortLink Refer code : mayankbaba\"\r\n                        intent.action = Intent.ACTION_SEND\r\n                        intent.putExtra(Intent.EXTRA_TEXT, it.data)\r\n                        intent.type = \"text/plain\"\r\n                        startActivity(intent)\r\n                    }\r\n                    is State.Failed -> showProgressBar(false)\r\n                }\r\n            }\r\n        }\r\n\r\n        mViewModel.mFeedDisplayList.observe(this){\r\n            val list = it.map { it.copy() }\r\n            mAdapter.submitList(list)\r\n            GthrLogger.i(\"dscndskc\", \"=====================\")\r\n            list.forEach {\r\n                GthrLogger.i(\"dscndskc\", \"${it.id}\")\r\n            }\r\n\r\n        }\r\n\r\n        mViewModel.mFeedList.observe(this){\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        if (mPage == 0)\r\n                            showProgressBar()\r\n                        else\r\n                            mViewModel.addFeedDisplayListLoadMore()\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                        showToast(it.message)\r\n                        mIsLoading = false\r\n                        if (mPage == 0)\r\n                            showProgressBar(false)\r\n                        else\r\n                            mViewModel.removeFeedDisplayListLoadMore()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        mViewModel.setFeedDisplayList(it.data)\r\n                        if (it.data.size < mLimit) {\r\n                            mHasNext = false\r\n                            GthrLogger.e(\"mayank\", \"data: ${mHasNext}\")\r\n                        }\r\n                        mIsLoading = false\r\n                        mPage++\r\n                        GthrLogger.e(\"observedata\", \"data: ${it.data}\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setUpFeedRecyclerView() {\r\n        mAdapter = FeedAdapter(object : FeedAdapter.FeedListener{\r\n            override fun onClick(feedDomainModel: FeedDomainModel) {\r\n                if(feedDomainModel.feedType==FeedType.ASK)\r\n                    if (GthrCollect.prefs?.isUserLoggedIn() == true)\r\n                        startActivity(AskFlowActivity.getInstance(requireContext(), AskFlowType.BUY_DIRECTLY_FROM_SOMEONE, ProductDisplayModel(ForSaleItemDomainModel(feedDomainModel))))\r\n                    else\r\n                        startActivity(HomeBottomNavActivity.getInstance(requireContext(), goToProfileSignUp = true))\r\n\r\n                else if (feedDomainModel.feedType==FeedType.COLLECTION)\r\n                    startActivity(ProfileActivity.getInstance(requireContext(), ProfileNavigationType.PROFILE,feedDomainModel.collection_firebaseRef))\r\n            }\r\n\r\n            override fun goToProfile(feedDomainModel: FeedDomainModel) {\r\n                startActivity(ProfileActivity.getInstance(requireContext(), ProfileNavigationType.PROFILE,feedDomainModel.collection_firebaseRef))\r\n            }\r\n\r\n            override fun share(feedDomainModel: FeedDomainModel) {\r\n                if(feedDomainModel.feedType==FeedType.BID&&feedDomainModel.feedType==FeedType.ASK)\r\n                    if(feedDomainModel.product_prodObjectID!=null&&feedDomainModel.productType!=null)\r\n                        mViewModel.getProductDynamicLink(feedDomainModel.product_prodObjectID,feedDomainModel.productType)\r\n                if(feedDomainModel.feedType==FeedType.COLLECTION)\r\n                    if(feedDomainModel.collection_firebaseRef!=null)\r\n                        mViewModel.getCollectionsDynamicLink(feedDomainModel.collection_firebaseRef)\r\n\r\n            }\r\n        })\r\n        val linearLayoutManager = LinearLayoutManager(requireContext())\r\n        mRvMain.apply {\r\n            layoutManager = linearLayoutManager\r\n            adapter = mAdapter\r\n        }\r\n\r\n        mRvMain.addOnScrollListener(object : RecyclerView.OnScrollListener() {\r\n            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\r\n                super.onScrollStateChanged(recyclerView, newState)\r\n            }\r\n\r\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n                super.onScrolled(recyclerView, dx, dy)\r\n                if (mPage == 0 || mHasNext) {\r\n                    val total: Int = linearLayoutManager.itemCount\r\n                    val lastVisibleItemCount: Int = linearLayoutManager.findLastVisibleItemPosition()\r\n                    GthrLogger.i(\"sdnvksdnf\", \"onScrolled: total $total lastVisibleItemCount $lastVisibleItemCount \")\r\n                    if (!mIsLoading) {\r\n                        if (total > 0)\r\n                            if ((total-1) == lastVisibleItemCount) {\r\n//                                mIsLoading = true\r\n//                                when {\r\n//                                    mAll.mIsActive -> getFeed(mPage,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n//                                    mCards.mIsActive -> getFeed(mPage,ProductCategory.CARDS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n//                                    mSealed.mIsActive -> getFeed(mPage,ProductCategory.SEALED,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n//                                    mFunko.mIsActive -> getFeed(mPage,ProductCategory.TOYS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n//                                }\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun initViews() {\r\n        mViewBinding.run {\r\n            mAll = cctAll\r\n            mCards = cctCards\r\n            mSealed = cctSealed\r\n            mFunko = cctFunko\r\n            mRvMain = rvMain\r\n            mCctvList = listOf(mAll, mCards, mSealed, mFunko)\r\n            initProgressBar(mViewBinding.layoutProgress)\r\n        }\r\n    }\r\n\r\n    private fun setUpClickListeners() {\r\n        mCctvList.forEach { view ->\r\n            view.setOnClickListener {\r\n                view.selectView()\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to select Single Collection Filter\r\n    private fun CustomCollectionTypeView.selectView() {\r\n        if (this.mIsActive) return\r\n\r\n        mainJob?.cancel()\r\n        mainJob = MainScope().launch {\r\n            mCctvList.forEach {\r\n                it.setActive(it == this@selectView)\r\n            }\r\n            when{\r\n                mAll.mIsActive-> getFeed(0,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null,true)\r\n                mCards.mIsActive-> getFeed(0,ProductCategory.CARDS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null,true)\r\n                mSealed.mIsActive-> getFeed(0,ProductCategory.SEALED,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null,true)\r\n                mFunko.mIsActive-> getFeed(0,ProductCategory.TOYS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null,true)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun resetFeed() {\r\n        mPage = 0\r\n        mHasNext = true\r\n        mViewModel.clearFeedDisplayList()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        mainJob?.cancel()\r\n    }\r\n\r\n    companion object {\r\n        private const val REQUEST_CODE_ID_VERIFICATION_BUY = 69\r\n        private const val REQUEST_CODE_ID_VERIFICATION_SELL = 420\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt b/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt
--- a/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt	(revision 1a0a90ec51fc6dc8f662a8b65a38a5c2643f3b8d)
+++ b/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt	(date 1633091399985)
@@ -56,7 +56,7 @@
     private var mProductCategory: ProductCategory? = null
     private var mCreatorUID: String? = null
 
-    private var mLimit : Int = 60
+    private var mLimit : Int = 20
     private var mPage: Int = 0
 
     //Paging
@@ -192,13 +192,13 @@
                     if (!mIsLoading) {
                         if (total > 0)
                             if ((total-1) == lastVisibleItemCount) {
-//                                mIsLoading = true
-//                                when {
-//                                    mAll.mIsActive -> getFeed(mPage,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
-//                                    mCards.mIsActive -> getFeed(mPage,ProductCategory.CARDS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
-//                                    mSealed.mIsActive -> getFeed(mPage,ProductCategory.SEALED,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
-//                                    mFunko.mIsActive -> getFeed(mPage,ProductCategory.TOYS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
-//                                }
+                                mIsLoading = true
+                                when {
+                                    mAll.mIsActive -> getFeed(mPage,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
+                                    mCards.mIsActive -> getFeed(mPage,ProductCategory.CARDS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
+                                    mSealed.mIsActive -> getFeed(mPage,ProductCategory.SEALED,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
+                                    mFunko.mIsActive -> getFeed(mPage,ProductCategory.TOYS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
+                                }
                             }
                     }
                 }
