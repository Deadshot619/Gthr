Index: app/src/main/java/com/gthr/gthrcollect/ui/askflow/AskFlowActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gthr.gthrcollect.ui.askflow\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.activity.viewModels\r\nimport androidx.appcompat.widget.AppCompatImageView\r\nimport androidx.appcompat.widget.AppCompatTextView\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.NavDestination\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.AppBarConfiguration\r\nimport androidx.navigation.ui.NavigationUI\r\nimport com.google.android.material.card.MaterialCardView\r\nimport com.gthr.gthrcollect.R\r\nimport com.gthr.gthrcollect.data.repository.AskFlowRepository\r\nimport com.gthr.gthrcollect.databinding.ActivityAskFlowBinding\r\nimport com.gthr.gthrcollect.model.State\r\nimport com.gthr.gthrcollect.model.domain.ProductDisplayModel\r\nimport com.gthr.gthrcollect.ui.askflow.afcardlanguage.AfCardLanguageFragmentArgs\r\nimport com.gthr.gthrcollect.ui.base.BaseActivity\r\nimport com.gthr.gthrcollect.ui.receiptdetail.purchasedetails.FullProductImage\r\nimport com.gthr.gthrcollect.utils.customviews.CustomProductCell\r\nimport com.gthr.gthrcollect.utils.enums.AskFlowType\r\nimport com.gthr.gthrcollect.utils.enums.ConditionType\r\nimport com.gthr.gthrcollect.utils.enums.ProductCategory\r\nimport com.gthr.gthrcollect.utils.enums.ProductType\r\nimport com.gthr.gthrcollect.utils.extensions.invisible\r\nimport com.gthr.gthrcollect.utils.extensions.setImage\r\nimport com.gthr.gthrcollect.utils.extensions.setProductImage\r\nimport com.gthr.gthrcollect.utils.extensions.visible\r\nimport com.gthr.gthrcollect.utils.logger.GthrLogger\r\nimport de.hdodenhof.circleimageview.CircleImageView\r\n\r\nclass AskFlowActivity : BaseActivity<AskFlowViewModel, ActivityAskFlowBinding>() {\r\n\r\n    override val mViewModel: AskFlowViewModel by viewModels {\r\n        AskFlowViewModelFactory(AskFlowRepository())\r\n    }\r\n\r\n    override fun getViewBinding() = ActivityAskFlowBinding.inflate(layoutInflater)\r\n\r\n    private lateinit var mNavController: NavController\r\n    private lateinit var mAppBarConfiguration: AppBarConfiguration\r\n    private lateinit var mToolbar: Toolbar\r\n\r\n    private lateinit var mAskFlowType: AskFlowType\r\n    private lateinit var mProductDisplayModel: ProductDisplayModel\r\n    private lateinit var mProductCategory: ProductCategory\r\n    private lateinit var mProductType: ProductType\r\n\r\n    private lateinit var mIvUserProfile: CircleImageView\r\n    private lateinit var mTvUserName: AppCompatTextView\r\n    private lateinit var mProductItem: CustomProductCell\r\n    private lateinit var mCvBackImage: MaterialCardView\r\n    private lateinit var mIvBackImage: AppCompatImageView\r\n\r\n    override fun onBinding() {\r\n        mAskFlowType = intent?.getSerializableExtra(KEY_ASK_FLOW_TYPE) as AskFlowType\r\n        mProductDisplayModel = intent.getParcelableExtra<ProductDisplayModel>(KEY_PRODUCT_DISPLAY_MODEL)!!\r\n        mProductType = mProductDisplayModel.productType!!\r\n        mProductCategory = mProductDisplayModel.productCategory!!\r\n\r\n        mViewModel.setProductType(mProductType)\r\n        mViewModel.setProductDisplayModel(mProductDisplayModel)\r\n\r\n        initViews()\r\n        setSupportActionBar(mToolbar)\r\n        setUpNavGraph()\r\n        setUpNavigationAndActionBar()\r\n        setUpClickListeners()\r\n        setUpObservers()\r\n        setData()\r\n    }\r\n\r\n    private fun setData() {\r\n        if(mAskFlowType!=AskFlowType.BUY_DIRECTLY_FROM_SOMEONE)\r\n            mViewModel.getProductDetails(mProductDisplayModel.refKey!!, mProductType)\r\n        else{\r\n            mCvBackImage.visible()\r\n            GthrLogger.i(\"sdhbsd\",\"${mProductDisplayModel.forsaleItemNodel}\")\r\n            mProductDisplayModel.forsaleItemNodel?.backImageURL?.let {\r\n                mIvBackImage.setProductImage(mProductDisplayModel.forsaleItemNodel?.backImageURL!!)\r\n            }\r\n            mViewModel.setBuyingDirFromSomeOneProPrice(mProductDisplayModel.forsaleItemNodel?.price!!)\r\n            mViewModel.getUserImage(mProductDisplayModel.forsaleItemNodel?.collectionFirebaseRef!!)\r\n            mProductItem.setValue(mProductDisplayModel)\r\n        }\r\n    }\r\n\r\n    private fun initViews() {\r\n        mViewBinding.run {\r\n            mToolbar = toolbar\r\n            mIvUserProfile = ivUserProfile\r\n            mTvUserName = tvUserName\r\n            mProductItem = cpcProductItem\r\n            mCvBackImage = cvBackImage\r\n            mIvBackImage = ivBackImage\r\n\r\n            when (mAskFlowType) {\r\n                AskFlowType.BUY -> mProductItem.setState(CustomProductCell.State.WANT)\r\n                AskFlowType.SELL -> {\r\n                    mProductItem.setState(CustomProductCell.State.FOR_SALE)\r\n                    mViewModel.setSell(true)\r\n                }\r\n                AskFlowType.COLLECT -> {\r\n                    mProductItem.setState(CustomProductCell.State.FOR_SALE)\r\n                    mProductItem.setLabelVisibility(isVisible = false)\r\n                }\r\n                AskFlowType.BUY_DIRECTLY_FROM_SOMEONE -> {\r\n                    mProductItem.setState(CustomProductCell.State.FOR_SALE)\r\n                    mProductItem.setLabelVisibility(isVisible = false)\r\n                    mIvUserProfile.visible()\r\n                    mTvUserName.visible()\r\n                }\r\n            }\r\n\r\n            initProgressBar(layoutProgress)\r\n        }\r\n    }\r\n\r\n    private fun setUpObservers() {\r\n\r\n        /* Front & Back Image */\r\n        mViewModel.frontImageUrl.observe(this, {\r\n            if (it != null)\r\n                mProductItem.mIvMain.setImage(it)\r\n        })\r\n\r\n        mViewModel.backImageUrl.observe(this, {\r\n            if (it != null) {\r\n                mCvBackImage.visible()\r\n                mIvBackImage.setImage(it)\r\n            } else\r\n                mCvBackImage.invisible()\r\n        })\r\n\r\n        mViewModel.mDisplayName.observe(this){\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        showProgressBar()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        mTvUserName.text = it.data\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        mViewModel.mUserImage.observe(this){\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        showProgressBar()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        mIvUserProfile.setProductImage(it.data)\r\n                        mViewModel.getUserDisplayName(mProductDisplayModel.forsaleItemNodel?.collectionFirebaseRef!!)\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Product Details */\r\n        mViewModel.yugiohProductDetails.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        showProgressBar()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        setInitialData(ProductDisplayModel(it.data))\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        mViewModel.pokemonProductDetails.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        showProgressBar()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        setInitialData(ProductDisplayModel(it.data))\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        mViewModel.mtgProductDetails.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        showProgressBar()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        setInitialData(ProductDisplayModel(it.data))\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        mViewModel.funkoProductDetails.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        showProgressBar()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        setInitialData(ProductDisplayModel(it.data))\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        mViewModel.sealedProductDetails.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        showProgressBar()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        setInitialData(ProductDisplayModel(it.data))\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n        /*Selected Language, Edition & Condition*/\r\n        mViewModel.askPrice.observe(this, {\r\n            it?.let {\r\n                mProductItem.setPrice(it.toString())\r\n            }\r\n        })\r\n        mViewModel.selectedLanguage.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                mProductItem.setLanguage(it.abbreviatedName)\r\n            }\r\n        })\r\n        mViewModel.selectedEdition.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                mProductItem.setEdition(it.title)\r\n            }\r\n        })\r\n        mViewModel.selectedConditionTitle.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                mProductItem.setConditionTitle(\r\n                    when (it) {\r\n                        ConditionType.UG -> getString(R.string.raw)\r\n                        ConditionType.PSA -> getString(R.string.psa)\r\n                        ConditionType.BGS -> getString(R.string.bgs)\r\n                        ConditionType.CGC -> getString(R.string.cgc)\r\n                        else -> getString(R.string.raw)\r\n                    }\r\n                )\r\n            }\r\n        })\r\n        mViewModel.selectedCondition.observe(this, {\r\n            it.contentIfNotHandled?.let {\r\n                mProductItem.setConditionValue(it.abbreviatedName)\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setUpClickListeners() {\r\n        mProductItem.setOnClickListener {\r\n            startActivity(\r\n                FullProductImage.getInstance(\r\n                    this,\r\n                    (mViewModel.frontImageUrl.value ?: mProductDisplayModel.firImageURL)\r\n                )\r\n            )\r\n        }\r\n\r\n        mCvBackImage.setOnClickListener {\r\n            mViewModel.backImageUrl.value?.let {\r\n                startActivity(FullProductImage.getInstance(this, it))\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setUpNavGraph() { //Setting NavGraph manually so that we can pass data to start destination\r\n        findNavController(R.id.nav_host_fragment)\r\n            .setGraph(\r\n                R.navigation.ask_flow_nav_graph,\r\n                AfCardLanguageFragmentArgs(productDisplayModel = mProductDisplayModel).toBundle()\r\n            )\r\n    }\r\n\r\n    private fun setUpNavigationAndActionBar() {\r\n        mNavController = this.findNavController(R.id.nav_host_fragment)\r\n        mAppBarConfiguration = /*AppBarConfiguration(navController.graph)*/\r\n            AppBarConfiguration.Builder().build()   //To show up button in start destination\r\n\r\n        NavigationUI.setupActionBarWithNavController(this, mNavController, mAppBarConfiguration)\r\n\r\n        mNavController.addOnDestinationChangedListener { nc: NavController, nd: NavDestination, bundle: Bundle? ->\r\n            mToolbar.title = \"\"     //Set Title as empty as we have used custom title\r\n            upButtonVisibility(isVisible = true)\r\n            supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_up_button) //Set up button as <\r\n            setToolbarTitleByType(mAskFlowType)\r\n\r\n            when (nd.id) {\r\n                R.id.afBuyListDetailsFragment -> {\r\n                    setToolbarTitle(getString(R.string.text_buylist_details))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        finish()\r\n        return false\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        if (mNavController.currentDestination?.id == R.id.afBuyListDetailsFragment)\r\n            finish()\r\n        else\r\n            finish()\r\n    }\r\n\r\n    private fun setToolbarTitleByType(askFlowType: AskFlowType) {\r\n        when (askFlowType) {\r\n            AskFlowType.BUY -> setToolbarTitle(getString(R.string.text_add_to_buylist))\r\n            AskFlowType.COLLECT -> setToolbarTitle(getString(R.string.text_add_to_collection))\r\n            AskFlowType.SELL -> setToolbarTitle(getString(R.string.text_place_an_ask))\r\n            AskFlowType.BUY_DIRECTLY_FROM_SOMEONE -> setToolbarTitle(getString(R.string.text_purchase_detail))\r\n        }\r\n    }\r\n\r\n    fun setToolbarTitle(title: String) {\r\n        mViewBinding.toolbarTitle.text = title\r\n    }\r\n\r\n    private fun upButtonVisibility(isVisible: Boolean) {\r\n        supportActionBar?.setDisplayShowHomeEnabled(isVisible)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(isVisible)\r\n    }\r\n\r\n    /**\r\n     * Set initial data to [mProductItem] view\r\n     */\r\n    private fun setInitialData(productDisplayModel: ProductDisplayModel) {\r\n        mProductItem.run {\r\n            setValue(productDisplayModel)\r\n            setPrice(\"-\")\r\n\r\n            if (mProductCategory == ProductCategory.CARDS) {\r\n                setLanguage(\"-\")\r\n                setConditionTitle(getString(R.string.raw))\r\n                setConditionValue(\"-\")\r\n                setEdition(\"-\")\r\n                mViewModel.retrieveLanguageList(productDisplayModel.productType!!)\r\n            }\r\n        }\r\n    }\r\n\r\n    internal fun getAskFlowType(): AskFlowType = mAskFlowType\r\n\r\n    companion object {\r\n        private const val KEY_ASK_FLOW_TYPE = \"key_ask_flow_type\"\r\n        private const val KEY_PRODUCT_DISPLAY_MODEL = \"key_product_display_model\"\r\n\r\n        fun getInstance(\r\n            context: Context,\r\n            askFlowType: AskFlowType,\r\n            productDisplayModel: ProductDisplayModel?\r\n        ) = Intent(context, AskFlowActivity::class.java).apply {\r\n            putExtra(KEY_ASK_FLOW_TYPE, askFlowType)\r\n            putExtra(KEY_PRODUCT_DISPLAY_MODEL, productDisplayModel)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gthr/gthrcollect/ui/askflow/AskFlowActivity.kt b/app/src/main/java/com/gthr/gthrcollect/ui/askflow/AskFlowActivity.kt
--- a/app/src/main/java/com/gthr/gthrcollect/ui/askflow/AskFlowActivity.kt	(revision 3d8b69d3b0273911c2d8ec9e65839dde3caca0c9)
+++ b/app/src/main/java/com/gthr/gthrcollect/ui/askflow/AskFlowActivity.kt	(date 1632644427150)
@@ -79,10 +79,10 @@
         if(mAskFlowType!=AskFlowType.BUY_DIRECTLY_FROM_SOMEONE)
             mViewModel.getProductDetails(mProductDisplayModel.refKey!!, mProductType)
         else{
-            mCvBackImage.visible()
             GthrLogger.i("sdhbsd","${mProductDisplayModel.forsaleItemNodel}")
             mProductDisplayModel.forsaleItemNodel?.backImageURL?.let {
-                mIvBackImage.setProductImage(mProductDisplayModel.forsaleItemNodel?.backImageURL!!)
+                mCvBackImage.visible()
+                mIvBackImage.setProductImage(it)
             }
             mViewModel.setBuyingDirFromSomeOneProPrice(mProductDisplayModel.forsaleItemNodel?.price!!)
             mViewModel.getUserImage(mProductDisplayModel.forsaleItemNodel?.collectionFirebaseRef!!)
