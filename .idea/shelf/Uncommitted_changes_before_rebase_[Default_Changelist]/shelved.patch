Index: app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gthr.gthrcollect.ui.homebottomnav.feed\r\n\r\n\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.DiffUtil\r\nimport androidx.recyclerview.widget.ListAdapter\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.gthr.gthrcollect.R\r\nimport com.gthr.gthrcollect.databinding.ItemCollectionBinding\r\nimport com.gthr.gthrcollect.databinding.ItemFeedBinding\r\nimport com.gthr.gthrcollect.databinding.ItemLoadMoreBinding\r\nimport com.gthr.gthrcollect.databinding.ItemTestProductBinding\r\nimport com.gthr.gthrcollect.model.domain.FeedDomainModel\r\nimport com.gthr.gthrcollect.model.domain.ReceiptDisplayModel\r\nimport com.gthr.gthrcollect.ui.homebottomnav.search.adapter.ProductAdapter\r\nimport com.gthr.gthrcollect.utils.enums.AdapterViewType\r\nimport com.gthr.gthrcollect.utils.enums.FeedType\r\nimport com.gthr.gthrcollect.utils.enums.ProductCategory\r\nimport com.gthr.gthrcollect.utils.extensions.*\r\nimport com.gthr.gthrcollect.utils.helper.getConditionTitle\r\nimport com.gthr.gthrcollect.utils.helper.getPokemonLanguageDomainModel\r\nimport com.gthr.gthrcollect.utils.logger.GthrLogger\r\n\r\nclass FeedAdapter(val listener: FeedListener) : ListAdapter<FeedDomainModel, RecyclerView.ViewHolder>(DiffCallback){\r\n\r\n    object DiffCallback : DiffUtil.ItemCallback<FeedDomainModel>(){\r\n        override fun areItemsTheSame(oldItem: FeedDomainModel, newItem: FeedDomainModel): Boolean {\r\n            return oldItem.id == oldItem.id\r\n        }\r\n\r\n        override fun areContentsTheSame(oldItem: FeedDomainModel, newItem: FeedDomainModel): Boolean {\r\n            return oldItem == oldItem\r\n        }\r\n    }\r\n\r\n    inner class FeedViewHolder(val binding : ItemFeedBinding): RecyclerView.ViewHolder(binding.root){\r\n        fun bind(){\r\n            val item = getItem(layoutPosition)\r\n            binding.ivProduct.clipToOutline = true\r\n\r\n            item.feedType?.let {\r\n                when(it){\r\n                    FeedType.BID -> setBuyList(binding)\r\n                    FeedType.ASK -> setAsk(binding)\r\n                    FeedType.COLLECTION -> setCollection(binding)\r\n                }\r\n            }\r\n\r\n            item.productCategory?.let {\r\n                when(it){\r\n                    ProductCategory.CARDS -> {\r\n                        setCard(binding)\r\n                        if(item.condition!=null){\r\n                            binding.tvCondition.text = binding.root.context?.getConditionTitle(item.condition.type)\r\n                            binding.tvConditionValue.text = item.condition.abbreviatedName\r\n                        }\r\n                        else{\r\n                            binding.tvCondition.text = \"-\"\r\n                            binding.tvConditionValue.text = \"-\"\r\n                        }\r\n                        binding.tvLanguage.text = if(item.language!=null) getPokemonLanguageDomainModel(item.language?.key).displayName  else \"-\"\r\n                        binding.tvRow1Colum2.text = if(item.product_group.isNullOrEmpty()) \"-\" else item.product_group\r\n                        binding.tvHashValue.text = if(item.product_productNumber.isNullOrEmpty()) \"-\" else item.product_productNumber\r\n                        binding.tvEditionValue.text = if(item.edition.isNullOrEmpty()) \"-\" else item.edition\r\n                    }\r\n                    ProductCategory.SEALED -> {\r\n                        setSealed(binding)\r\n                        binding.tvSealedSet.text = if(item.product_group.isNullOrEmpty()) \"-\" else item.product_group\r\n                    }\r\n                    ProductCategory.TOYS -> {\r\n                        setToy(binding)\r\n                        binding.tvToyLicense.text = \"-\"\r\n                        binding.tvToyHash.text = if(item.product_productNumber.isNullOrEmpty()) \"-\" else item.product_productNumber\r\n                    }\r\n                }\r\n            }\r\n\r\n            binding.tvUserName.text = if(item.collectionDisplayName.isNullOrEmpty()) \"-\" else item.collectionDisplayName\r\n            binding.tvProductType.text = if(item.product_rarity.isNullOrEmpty()) \"-\" else item.product_rarity\r\n            binding.tvTitle.text = if(item.product_productName.isNullOrEmpty()) \"-\" else item.product_productName\r\n            binding.tvPrice.text = item?.price?.let { String.format(binding.tvPrice.context.getString(R.string.rate_common),it.toDouble()) }\r\n\r\n            item.collection_profileImageURL?.let { binding.ivUser.setProfileImage(it) }\r\n\r\n            if(item.frontImageURL.isNullOrEmpty())\r\n                item.product_firImageURL?.let { binding.ivProduct.setProductImage(it) }\r\n            else\r\n                item.frontImageURL?.let { binding.ivProduct.setProductImage(it) }\r\n\r\n            binding.root.setOnClickListener {\r\n                listener.onClick(item)\r\n            }\r\n\r\n            binding.ivShare.setOnClickListener {\r\n                listener.share(item)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    inner class ItemLoadMoreViewHolder(val binding: ItemLoadMoreBinding) : RecyclerView.ViewHolder(binding.root)\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder =\r\n        if (viewType == AdapterViewType.VIEW_TYPE_ITEM.value)\r\n            FeedViewHolder(ItemFeedBinding.inflate(LayoutInflater.from(parent.context),parent,false))\r\n        else\r\n            ItemLoadMoreViewHolder(ItemLoadMoreBinding.inflate(LayoutInflater.from(parent.context), parent, false))\r\n\r\n\r\n\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        if(getItem(position).viewType== AdapterViewType.VIEW_TYPE_ITEM)\r\n            (holder as FeedViewHolder).bind()\r\n    }\r\n\r\n\r\n    override fun getItemViewType(position: Int): Int {\r\n        return getItem(position).viewType.value\r\n    }\r\n\r\n    private fun setCollection(binding: ItemFeedBinding) {\r\n        binding.tvNewTo.text = binding.tvNewTo.context.getString(R.string.text_feed_new_to_collection)\r\n        binding.tvNewTo.setTextColor(binding.tvNewTo.getResolvedColor(R.color.text_color_dark_green))\r\n        binding.btnBuyNow.gone()\r\n        binding.tvPrice.gone()\r\n    }\r\n\r\n    private fun setAsk(binding: ItemFeedBinding) {\r\n        binding.tvNewTo.text = binding.tvNewTo.context.getString(R.string.text_feed_new_ask)\r\n        binding.tvNewTo.setTextColor(binding.tvNewTo.getResolvedColor(R.color.red))\r\n        binding.btnBuyNow.visible()\r\n        binding.tvPrice.visible()\r\n    }\r\n\r\n    private fun setBuyList(binding: ItemFeedBinding) {\r\n        binding.tvNewTo.text = binding.tvNewTo.context.getString(R.string.text_feed_new_to_buy_list)\r\n        binding.tvNewTo.setTextColor(binding.tvNewTo.getResolvedColor(R.color.text_color_dark_green))\r\n        binding.btnBuyNow.gone()\r\n        binding.tvPrice.visible()\r\n    }\r\n\r\n    private fun setToy(binding: ItemFeedBinding) {\r\n        binding.groupToy.visible()\r\n        binding.groupCard.gone()\r\n        binding.groupSealed.gone()\r\n    }\r\n\r\n    private fun setSealed(binding: ItemFeedBinding) {\r\n        binding.groupToy.gone()\r\n        binding.groupCard.gone()\r\n        binding.groupSealed.visible()\r\n    }\r\n\r\n    private fun setCard(binding: ItemFeedBinding) {\r\n        binding.groupToy.gone()\r\n        binding.groupCard.visible()\r\n        binding.groupSealed.gone()\r\n    }\r\n\r\n    interface FeedListener {\r\n        fun onClick(feedDomainModel: FeedDomainModel)\r\n        fun share(feedDomainModel: FeedDomainModel)\r\n        fun goToProfile(feedDomainModel: FeedDomainModel)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt b/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt
--- a/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt	(revision 4ed387dd088e15509979a4363401d9451399e8b0)
+++ b/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedAdapter.kt	(date 1633084090326)
@@ -64,21 +64,23 @@
                         binding.tvRow1Colum2.text = if(item.product_group.isNullOrEmpty()) "-" else item.product_group
                         binding.tvHashValue.text = if(item.product_productNumber.isNullOrEmpty()) "-" else item.product_productNumber
                         binding.tvEditionValue.text = if(item.edition.isNullOrEmpty()) "-" else item.edition
+                        binding.tvProductType.text = if(item.product_rarity.isNullOrEmpty()) "-" else item.product_rarity
                     }
                     ProductCategory.SEALED -> {
                         setSealed(binding)
                         binding.tvSealedSet.text = if(item.product_group.isNullOrEmpty()) "-" else item.product_group
+                        binding.tvProductType.text = if(item.productType?.title.isNullOrEmpty()) "-" else item.productType?.title
                     }
                     ProductCategory.TOYS -> {
                         setToy(binding)
                         binding.tvToyLicense.text = "-"
+                        binding.tvProductType.text = if(item.productType?.title.isNullOrEmpty()) "-" else item.productType?.title
                         binding.tvToyHash.text = if(item.product_productNumber.isNullOrEmpty()) "-" else item.product_productNumber
                     }
                 }
             }
 
             binding.tvUserName.text = if(item.collectionDisplayName.isNullOrEmpty()) "-" else item.collectionDisplayName
-            binding.tvProductType.text = if(item.product_rarity.isNullOrEmpty()) "-" else item.product_rarity
             binding.tvTitle.text = if(item.product_productName.isNullOrEmpty()) "-" else item.product_productName
             binding.tvPrice.text = item?.price?.let { String.format(binding.tvPrice.context.getString(R.string.rate_common),it.toDouble()) }
 
Index: app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gthr.gthrcollect.ui.homebottomnav.feed\r\n\r\nimport android.content.Intent\r\nimport android.util.Log\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.gthr.gthrcollect.GthrCollect\r\nimport com.gthr.gthrcollect.data.repository.DynamicLinkRepository\r\nimport com.gthr.gthrcollect.data.repository.FeedRepository\r\nimport com.gthr.gthrcollect.databinding.FeedFragmentBinding\r\nimport com.gthr.gthrcollect.model.State\r\nimport com.gthr.gthrcollect.model.domain.FeedDomainModel\r\nimport com.gthr.gthrcollect.model.domain.ForSaleItemDomainModel\r\nimport com.gthr.gthrcollect.model.domain.ProductDisplayModel\r\nimport com.gthr.gthrcollect.ui.askflow.AskFlowActivity\r\nimport com.gthr.gthrcollect.ui.base.BaseFragment\r\nimport com.gthr.gthrcollect.ui.editaccountinfo.EditAccountInfoActivity\r\nimport com.gthr.gthrcollect.ui.homebottomnav.HomeBottomNavActivity\r\nimport com.gthr.gthrcollect.ui.productdetail.productdetailscreen.ProductDetailFragment\r\nimport com.gthr.gthrcollect.ui.profile.ProfileActivity\r\nimport com.gthr.gthrcollect.utils.customviews.CustomCollectionTypeView\r\nimport com.gthr.gthrcollect.utils.enums.*\r\nimport com.gthr.gthrcollect.utils.extensions.isUserGovIdVerified\r\nimport com.gthr.gthrcollect.utils.extensions.isUserLoggedIn\r\nimport com.gthr.gthrcollect.utils.extensions.showToast\r\nimport com.gthr.gthrcollect.utils.logger.GthrLogger\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.MainScope\r\nimport kotlinx.coroutines.launch\r\n\r\nclass FeedFragment : BaseFragment<FeedViewModel, FeedFragmentBinding>() {\r\n\r\n    override fun getViewBinding() = FeedFragmentBinding.inflate(layoutInflater)\r\n    override val mViewModel: FeedViewModel by viewModels{\r\n        FeedViewModelFactory(\r\n            FeedRepository(),\r\n            DynamicLinkRepository()\r\n        )\r\n    }\r\n\r\n    private var mainJob: Job? = null\r\n\r\n    private lateinit var mAll: CustomCollectionTypeView\r\n    private lateinit var mCards: CustomCollectionTypeView\r\n    private lateinit var mSealed: CustomCollectionTypeView\r\n    private lateinit var mFunko: CustomCollectionTypeView\r\n\r\n    private lateinit var mRvMain : RecyclerView\r\n    private lateinit var mAdapter: FeedAdapter\r\n\r\n    //List of Collection filter views\r\n    private lateinit var mCctvList: List<CustomCollectionTypeView>\r\n\r\n    //Filter var\r\n    private var mProductCategory: ProductCategory? = null\r\n    private var mCreatorUID: String? = null\r\n\r\n    private var mLimit : Int = 60\r\n    private var mPage: Int = 0\r\n\r\n    //Paging\r\n    private var mIsLoading = false\r\n    private var mHasNext = true\r\n\r\n    override fun onBinding() {\r\n        initViews()\r\n        setUpClickListeners()\r\n        setUpFeedRecyclerView()\r\n        setUpObserver()\r\n        getFeed(0,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n    }\r\n\r\n    private fun getFeed(page: Int, productCategory: ProductCategory?, creatorUID: String?,setReset: Boolean = false){\r\n        if (setReset)\r\n            resetFeed()\r\n\r\n        mPage = page\r\n        mProductCategory = productCategory\r\n        mCreatorUID = creatorUID\r\n        mViewModel.fetchFeed(mLimit,mPage,mProductCategory,mCreatorUID)\r\n    }\r\n\r\n    private fun setUpObserver() {\r\n\r\n        mViewModel.mDynamicLink.observe(this){\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> showProgressBar()\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        val intent = Intent()\r\n                        // val msg = \"Click and install this application $shortLink Refer code : mayankbaba\"\r\n                        intent.action = Intent.ACTION_SEND\r\n                        intent.putExtra(Intent.EXTRA_TEXT, it.data)\r\n                        intent.type = \"text/plain\"\r\n                        startActivity(intent)\r\n                    }\r\n                    is State.Failed -> showProgressBar(false)\r\n                }\r\n            }\r\n        }\r\n\r\n        mViewModel.mFeedDisplayList.observe(this){\r\n            val list = it.map { it.copy() }\r\n            mAdapter.submitList(list)\r\n            GthrLogger.i(\"dscndskc\", \"=====================\")\r\n            list.forEach {\r\n                GthrLogger.i(\"dscndskc\", \"${it.id}\")\r\n            }\r\n\r\n        }\r\n\r\n        mViewModel.mFeedList.observe(this){\r\n            it.contentIfNotHandled?.let {\r\n                when (it) {\r\n                    is State.Loading -> {\r\n                        if (mPage == 0)\r\n                            showProgressBar()\r\n                        else\r\n                            mViewModel.addFeedDisplayListLoadMore()\r\n                    }\r\n                    is State.Failed -> {\r\n                        showProgressBar(false)\r\n                        showToast(it.message)\r\n                        mIsLoading = false\r\n                        if (mPage == 0)\r\n                            showProgressBar(false)\r\n                        else\r\n                            mViewModel.removeFeedDisplayListLoadMore()\r\n                    }\r\n                    is State.Success -> {\r\n                        showProgressBar(false)\r\n                        mViewModel.setFeedDisplayList(it.data)\r\n                        if (it.data.size < mLimit) {\r\n                            mHasNext = false\r\n                            GthrLogger.e(\"mayank\", \"data: ${mHasNext}\")\r\n                        }\r\n                        mIsLoading = false\r\n                        mPage++\r\n                        GthrLogger.e(\"observedata\", \"data: ${it.data}\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setUpFeedRecyclerView() {\r\n        mAdapter = FeedAdapter(object : FeedAdapter.FeedListener{\r\n            override fun onClick(feedDomainModel: FeedDomainModel) {\r\n                if(feedDomainModel.feedType==FeedType.ASK)\r\n                    if (GthrCollect.prefs?.isUserLoggedIn() == true)\r\n                        startActivity(AskFlowActivity.getInstance(requireContext(), AskFlowType.BUY_DIRECTLY_FROM_SOMEONE, ProductDisplayModel(ForSaleItemDomainModel(feedDomainModel))))\r\n                    else\r\n                        startActivity(HomeBottomNavActivity.getInstance(requireContext(), goToProfileSignUp = true))\r\n\r\n                else if (feedDomainModel.feedType==FeedType.COLLECTION)\r\n                    startActivity(ProfileActivity.getInstance(requireContext(), ProfileNavigationType.PROFILE,feedDomainModel.collection_firebaseRef))\r\n            }\r\n\r\n            override fun goToProfile(feedDomainModel: FeedDomainModel) {\r\n                startActivity(ProfileActivity.getInstance(requireContext(), ProfileNavigationType.PROFILE,feedDomainModel.collection_firebaseRef))\r\n            }\r\n\r\n            override fun share(feedDomainModel: FeedDomainModel) {\r\n                if(feedDomainModel.feedType==FeedType.BID&&feedDomainModel.feedType==FeedType.ASK)\r\n                    if(feedDomainModel.product_prodObjectID!=null&&feedDomainModel.productType!=null)\r\n                        mViewModel.getProductDynamicLink(feedDomainModel.product_prodObjectID,feedDomainModel.productType)\r\n                if(feedDomainModel.feedType==FeedType.COLLECTION)\r\n                    if(feedDomainModel.collection_firebaseRef!=null)\r\n                        mViewModel.getCollectionsDynamicLink(feedDomainModel.collection_firebaseRef)\r\n\r\n            }\r\n        })\r\n        val linearLayoutManager = LinearLayoutManager(requireContext())\r\n        mRvMain.apply {\r\n            layoutManager = linearLayoutManager\r\n            adapter = mAdapter\r\n        }\r\n\r\n        mRvMain.addOnScrollListener(object : RecyclerView.OnScrollListener() {\r\n            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\r\n                super.onScrollStateChanged(recyclerView, newState)\r\n            }\r\n\r\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n                super.onScrolled(recyclerView, dx, dy)\r\n                if (mPage == 0 || mHasNext) {\r\n                    val total: Int = linearLayoutManager.itemCount\r\n                    val lastVisibleItemCount: Int = linearLayoutManager.findLastVisibleItemPosition()\r\n                    GthrLogger.i(\"sdnvksdnf\", \"onScrolled: total $total lastVisibleItemCount $lastVisibleItemCount \")\r\n                    if (!mIsLoading) {\r\n                        if (total > 0)\r\n                            if ((total-1) == lastVisibleItemCount) {\r\n//                                mIsLoading = true\r\n//                                when {\r\n//                                    mAll.mIsActive -> getFeed(mPage,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n//                                    mCards.mIsActive -> getFeed(mPage,ProductCategory.CARDS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n//                                    mSealed.mIsActive -> getFeed(mPage,ProductCategory.SEALED,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n//                                    mFunko.mIsActive -> getFeed(mPage,ProductCategory.TOYS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)\r\n//                                }\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun initViews() {\r\n        mViewBinding.run {\r\n            mAll = cctAll\r\n            mCards = cctCards\r\n            mSealed = cctSealed\r\n            mFunko = cctFunko\r\n            mRvMain = rvMain\r\n            mCctvList = listOf(mAll, mCards, mSealed, mFunko)\r\n            initProgressBar(mViewBinding.layoutProgress)\r\n        }\r\n    }\r\n\r\n    private fun setUpClickListeners() {\r\n        mCctvList.forEach { view ->\r\n            view.setOnClickListener {\r\n                view.selectView()\r\n            }\r\n        }\r\n    }\r\n\r\n    //Method to select Single Collection Filter\r\n    private fun CustomCollectionTypeView.selectView() {\r\n        if (this.mIsActive) return\r\n\r\n        mainJob?.cancel()\r\n        mainJob = MainScope().launch {\r\n            mCctvList.forEach {\r\n                it.setActive(it == this@selectView)\r\n            }\r\n            when{\r\n                mAll.mIsActive-> getFeed(0,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null,true)\r\n                mCards.mIsActive-> getFeed(0,ProductCategory.CARDS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null,true)\r\n                mSealed.mIsActive-> getFeed(0,ProductCategory.SEALED,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null,true)\r\n                mFunko.mIsActive-> getFeed(0,ProductCategory.TOYS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null,true)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun resetFeed() {\r\n        mPage = 0\r\n        mHasNext = true\r\n        mViewModel.clearFeedDisplayList()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        mainJob?.cancel()\r\n    }\r\n\r\n    companion object {\r\n        private const val REQUEST_CODE_ID_VERIFICATION_BUY = 69\r\n        private const val REQUEST_CODE_ID_VERIFICATION_SELL = 420\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt b/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt
--- a/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt	(revision 4ed387dd088e15509979a4363401d9451399e8b0)
+++ b/app/src/main/java/com/gthr/gthrcollect/ui/homebottomnav/feed/FeedFragment.kt	(date 1633083724459)
@@ -56,7 +56,7 @@
     private var mProductCategory: ProductCategory? = null
     private var mCreatorUID: String? = null
 
-    private var mLimit : Int = 60
+    private var mLimit : Int = 20
     private var mPage: Int = 0
 
     //Paging
@@ -192,13 +192,13 @@
                     if (!mIsLoading) {
                         if (total > 0)
                             if ((total-1) == lastVisibleItemCount) {
-//                                mIsLoading = true
-//                                when {
-//                                    mAll.mIsActive -> getFeed(mPage,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
-//                                    mCards.mIsActive -> getFeed(mPage,ProductCategory.CARDS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
-//                                    mSealed.mIsActive -> getFeed(mPage,ProductCategory.SEALED,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
-//                                    mFunko.mIsActive -> getFeed(mPage,ProductCategory.TOYS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
-//                                }
+                                mIsLoading = true
+                                when {
+                                    mAll.mIsActive -> getFeed(mPage,null,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
+                                    mCards.mIsActive -> getFeed(mPage,ProductCategory.CARDS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
+                                    mSealed.mIsActive -> getFeed(mPage,ProductCategory.SEALED,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
+                                    mFunko.mIsActive -> getFeed(mPage,ProductCategory.TOYS,GthrCollect.prefs?.collectionInfoModel?.userRefKey?:null)
+                                }
                             }
                     }
                 }
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <multipleDevicesSelectedInDropDown value=\"true\" />\r\n    <runningDeviceTargetsSelectedWithDialog>\r\n      <Target>\r\n        <type value=\"RUNNING_DEVICE_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"SERIAL_NUMBER\" />\r\n            <value value=\"12c75bad\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n      <Target>\r\n        <type value=\"RUNNING_DEVICE_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"SERIAL_NUMBER\" />\r\n            <value value=\"192.168.0.200:5555\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </runningDeviceTargetsSelectedWithDialog>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 4ed387dd088e15509979a4363401d9451399e8b0)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1633082738870)
@@ -1,26 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="deploymentTargetDropDown">
-    <multipleDevicesSelectedInDropDown value="true" />
-    <runningDeviceTargetsSelectedWithDialog>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="SERIAL_NUMBER" />
-            <value value="12c75bad" />
-          </Key>
-        </deviceKey>
-      </Target>
+    <runningDeviceTargetSelectedWithDropDown>
       <Target>
         <type value="RUNNING_DEVICE_TARGET" />
         <deviceKey>
           <Key>
             <type value="SERIAL_NUMBER" />
-            <value value="192.168.0.200:5555" />
+            <value value="CIOZ75DMQOMRLRG6" />
           </Key>
         </deviceKey>
       </Target>
-    </runningDeviceTargetsSelectedWithDialog>
+    </runningDeviceTargetSelectedWithDropDown>
+    <timeTargetWasSelectedWithDropDown value="2021-10-01T10:03:57.473623200Z" />
   </component>
 </project>
\ No newline at end of file
